{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c3f39157",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 2.5.2 (SDL 2.28.3, Python 3.9.7)\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import filedialog\n",
    "import pygame\n",
    "\n",
    "class MusicPlayer:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Music Player\")\n",
    "        self.root.geometry(\"400x200\")\n",
    "\n",
    "        pygame.mixer.init()\n",
    "\n",
    "        self.current_file = None\n",
    "\n",
    "        self.create_widgets()\n",
    "\n",
    "    def create_widgets(self):\n",
    "        self.label = tk.Label(self.root, text=\"No file selected\", font=(\"Helvetica\", 14))\n",
    "        self.label.pack(pady=10)\n",
    "\n",
    "        self.load_button = tk.Button(self.root, text=\"Load Music\", command=self.load_music)\n",
    "        self.load_button.pack(pady=5)\n",
    "\n",
    "        self.play_button = tk.Button(self.root, text=\"Play\", command=self.play_music)\n",
    "        self.play_button.pack(pady=5)\n",
    "\n",
    "        self.pause_button = tk.Button(self.root, text=\"Pause\", command=self.pause_music)\n",
    "        self.pause_button.pack(pady=5)\n",
    "\n",
    "        self.stop_button = tk.Button(self.root, text=\"Stop\", command=self.stop_music)\n",
    "        self.stop_button.pack(pady=5)\n",
    "\n",
    "    def load_music(self):\n",
    "        file_path = filedialog.askopenfilename(filetypes=[(\"Music Files\", \"*.mp3 *.wav\")])\n",
    "        if file_path:\n",
    "            self.current_file = file_path\n",
    "            self.label.config(text=f\"Loaded: {file_path}\")\n",
    "\n",
    "    def play_music(self):\n",
    "        if self.current_file:\n",
    "            pygame.mixer.music.load(self.current_file)\n",
    "            pygame.mixer.music.play()\n",
    "            self.label.config(text=f\"Playing: {self.current_file}\")\n",
    "        else:\n",
    "            self.label.config(text=\"No file loaded\")\n",
    "\n",
    "    def pause_music(self):\n",
    "        if pygame.mixer.music.get_busy():\n",
    "            pygame.mixer.music.pause()\n",
    "            self.label.config(text=\"Paused\")\n",
    "\n",
    "    def stop_music(self):\n",
    "        pygame.mixer.music.stop()\n",
    "        self.label.config(text=\"Stopped\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = MusicPlayer(root)\n",
    "    root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ac3a0e28",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import filedialog\n",
    "import pygame\n",
    "\n",
    "class MusicPlayer:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Music Player\")\n",
    "        self.root.geometry(\"400x300\")\n",
    "        self.root.configure(bg=\"#1c1c1c\")\n",
    "\n",
    "        pygame.mixer.init()\n",
    "\n",
    "        self.current_file = None\n",
    "\n",
    "        self.create_widgets()\n",
    "\n",
    "    def create_widgets(self):\n",
    "        self.label = tk.Label(\n",
    "            self.root, text=\"No file selected\", font=(\"Helvetica\", 14), fg=\"#ffffff\", bg=\"#1c1c1c\"\n",
    "        )\n",
    "        self.label.pack(pady=20)\n",
    "\n",
    "        self.load_button = tk.Button(\n",
    "            self.root, text=\"Load Music\", command=self.load_music, width=15, font=(\"Helvetica\", 12), \n",
    "            bg=\"#4CAF50\", fg=\"#ffffff\", activebackground=\"#45a049\"\n",
    "        )\n",
    "        self.load_button.pack(pady=5)\n",
    "\n",
    "        self.play_button = tk.Button(\n",
    "            self.root, text=\"Play\", command=self.play_music, width=15, font=(\"Helvetica\", 12), \n",
    "            bg=\"#2196F3\", fg=\"#ffffff\", activebackground=\"#1e88e5\"\n",
    "        )\n",
    "        self.play_button.pack(pady=5)\n",
    "\n",
    "        self.pause_button = tk.Button(\n",
    "            self.root, text=\"Pause\", command=self.pause_music, width=15, font=(\"Helvetica\", 12), \n",
    "            bg=\"#FFC107\", fg=\"#ffffff\", activebackground=\"#ffb300\"\n",
    "        )\n",
    "        self.pause_button.pack(pady=5)\n",
    "\n",
    "        self.stop_button = tk.Button(\n",
    "            self.root, text=\"Stop\", command=self.stop_music, width=15, font=(\"Helvetica\", 12), \n",
    "            bg=\"#F44336\", fg=\"#ffffff\", activebackground=\"#e53935\"\n",
    "        )\n",
    "        self.stop_button.pack(pady=5)\n",
    "\n",
    "    def load_music(self):\n",
    "        file_path = filedialog.askopenfilename(filetypes=[(\"Music Files\", \"*.mp3 *.wav\")])\n",
    "        if file_path:\n",
    "            self.current_file = file_path\n",
    "            self.label.config(text=f\"Loaded: {file_path}\", fg=\"#00ff00\")\n",
    "\n",
    "    def play_music(self):\n",
    "        if self.current_file:\n",
    "            pygame.mixer.music.load(self.current_file)\n",
    "            pygame.mixer.music.play()\n",
    "            self.label.config(text=f\"Playing: {self.current_file}\", fg=\"#00ff00\")\n",
    "        else:\n",
    "            self.label.config(text=\"No file loaded\", fg=\"#ff0000\")\n",
    "\n",
    "    def pause_music(self):\n",
    "        if pygame.mixer.music.get_busy():\n",
    "            pygame.mixer.music.pause()\n",
    "            self.label.config(text=\"Paused\", fg=\"#ffff00\")\n",
    "\n",
    "    def stop_music(self):\n",
    "        pygame.mixer.music.stop()\n",
    "        self.label.config(text=\"Stopped\", fg=\"#ff0000\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = MusicPlayer(root)\n",
    "    root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64605134",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
